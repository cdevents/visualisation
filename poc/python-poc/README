# Python POC
This folder contains a python POC implementaion of various CDEvents visualization components

# Components
The compenents are to be installed on a Kind Cluster (https://kind.sigs.k8s.io/)
On top of this KNative Eventing is installed based on the instruction at https://knative.dev/docs/install/yaml-install/eventing/install-eventing-with-yaml/
The in memory and MT based channel were used
 
Also Prometheus is installed based on https://github.com/prometheus-operator/kube-prometheus and 
Loki based on https://grafana.com/docs/loki/latest/installation/helm/install-scalable/ with Minio using the included loki-values.yaml file
Promtail is installed based on https://grafana.com/docs/loki/latest/clients/promtail/installation/

We need to create a broker using 

kubectl apply -f broker.yaml 

We will use prometheus to collect the CDEvent metrics generated by a specific CD event listener which is in the python-reciever directory.
This reciever generates metrics and logs the CD Events so that they can be scraped and collected by Prometheus and Loki/Promtail

# Build the Docker image
docker build python-reciever/ -t cdeventreciever-python:latest

# load the docker image into kind
kind load docker-image cdeventreciever-python:latest

# create a deployment and service and trigger and the 
kubectl apply -f python-reciever/cdeventreciever.yaml
kubectl apply -f python-reciever/cdeventtrigger.yaml 

# create a Promethues service monor to scrape the metrics
kubectl apply -f python-reciever/service-monitor.yaml


# A second service is created to also listen to all the events and this stores the events into an
# aranngodb graph DB 
docker build arango/ -t arangoclient:latest

kind load docker-image arangoclient:latest
kubectl apply -f arango/storage.yaml 
kubectl apply -f arango/storage-trigger.yaml

# A thrid service reads from the ArangoDB and exposes and API based on
# Node Graph API (https://grafana.com/grafana/plugins/hamedkarbasi93-nodegraphapi-datasource/) for consumption in grafana
 
docker build nodeapi/ -t nodeapi:latest

kind load docker-image nodeapi:latest
kubectl apply -f nodeapi/nodeapi.yaml 


# Now we can expose the KNative event ingress so that we can send CD Events
kubectl port-forward --address localhost -n knative-eventing svc/broker-ingress 8081:80

# send Events
# this sends a list of events just to demonstate event reception 
cd eventsender; python eventsendermultiple.py

# finally grafana can be exposed and a dashboard created to show the metrics and logs
kubectl port-forward --address localhost -n monitoring svc/grafana 3000:3000

# You need to add an plugin called Node Graph API
# look at http://localhost:3000/plugins?filterBy=all&filterByType=all

# Two datasources need to be created http://localhost:3000/datasources/new
# one for NodeGraphApi which points to http://nodeapi.default.svc:5000
# one for Loki which point to http://loki-gateway.default.svc 

Then you can import the Dashboard CDEVENDASHBOARD.json selecting the apprioriate datasources





# SAMPLE commands as of 26-07-2023 for basic setup
# these can change and following the current instructions on the websites is advised
 
 
kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.10.2/eventing-crds.yaml

kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.10.2/eventing-core.yaml

kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.10.2/in-memory-channel.yaml
 
kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.10.2/mt-channel-broker.yaml

#   kubectl apply -f mt-channel-broker.yaml
kubectl apply -f broker.yaml 

git clone git@github.com:prometheus-operator/kube-prometheus.git

kubectl apply --server-side -f kube-prometheus/manifests/setup
kubectl wait 	--for condition=Established 	--all CustomResourceDefinition 	--namespace=monitoring
kubectl apply -f kube-prometheus/manifests/


helm install --values loki/loki-values.yaml loki grafana/loki
helm upgrade --install  promtail grafana/promtail
